searchState.loadedDescShard("serde_yml", 0, "Serde YML (a fork of Serde YAML)\nRepresents a YAML boolean.\nA type that can be used to index into a <code>serde_yml::Value</code>. …\nA YAML mapping in which the keys and values are both …\nRepresents a YAML mapping in which the keys and values are …\nRepresents a YAML null value.\nRepresents a YAML number, whether integer or floating …\nRepresents a YAML numerical value, whether integer or …\nA YAML sequence in which the elements are <code>serde_yml::Value</code>.\nRepresents a YAML sequence in which the elements are …\nRepresents a YAML string.\nA representation of YAML’s <code>!Tag</code> syntax, used for enums.\nRepresents any valid YAML value.\nThe <code>de</code> module contains the library’s YAML deserializer.\nCompare YAML value with String\nCompare <code>&amp;str</code> with YAML value\nCompare <code>str</code> with YAML value\nCompare YAML value with bool\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a slice to <code>Value</code>\nConvert boolean to <code>Value</code>\nConvert <code>String</code> to <code>Value</code>\nConvert string slice to <code>Value</code>\nConvert copy-on-write string to <code>Value</code>\nConvert map (with string keys) to <code>Value</code>\nConvert a <code>Vec</code> to <code>Value</code>\nConvert an iteratable type to a YAML sequence\nInterpret a <code>serde_yml::Value</code> as an instance of type <code>T</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe <code>libyml</code> module contains the library’s YAML parser and …\nThe <code>loader</code> module contains the <code>Loader</code> type for YAML …\nThe underlying map.\nThe <code>mapping</code> module contains the <code>Mapping</code> type for YAML …\nThe <code>modules</code> module contains the library’s modules.\nThe <code>number</code> module contains the <code>Number</code> type for YAML …\nThe <code>ser</code> module contains the library’s YAML serializer. …\nConverts a serializable value into a <code>serde_yml::Value</code>.\nThe <code>value</code> module contains the <code>Value</code> type for YAML values. …\nThe <code>with</code> module contains the <code>With</code> type for YAML values. …\nRepresents an alias event, which refers to a previously …\nRepresents the current state of an enum during …\nA structure that deserializes YAML into Rust values.\nIndicates that the YAML input is a single <code>Document</code> …\nRepresents the different events that can occur during YAML …\nIndicates that an error occurred during parsing.\nIndicates that the YAML input is provided through an …\nRepresents the end of a mapping event.\nRepresents the start of a mapping event. The <code>MappingStart</code> …\nRepresents the progress of parsing a YAML document.\nIndicates that the YAML input is provided through a <code>Read</code> …\nRepresents a scalar event, which contains a scalar value. …\nRepresents the end of a sequence event.\nRepresents the start of a sequence event. The <code>SequenceStart</code>…\nIndicates that the YAML input is a byte slice.\nIndicates that the YAML input is a string slice.\nRepresents a void event, which is an empty event. This …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize an instance of type <code>T</code> from an IO stream of …\nDeserializes an instance of type <code>T</code> from an IO stream of …\nDeserialize an instance of type <code>T</code> from bytes of YAML text.\nDeserializes an instance of type <code>T</code> from bytes of YAML text.\nDeserialize an instance of type <code>T</code> from a string of YAML …\nDeserializes an instance of type <code>T</code> from a string of YAML …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe name of the enum variant.\nRepresents the progress of parsing a YAML document.\nThe tag of the enum variant.\nYAML emitter.\nError handling.\nYAML parser.\nC string handling.\nTag directive handling.\nUtility types.\nAny scalar style.\nEnd of a YAML document.\nStart of a YAML document.\nDouble quoted scalar style.\nA YAML emitter.\nRepresents a pinned emitter for YAML serialization.\nErrors that can occur during YAML emission.\nYAML event types.\nFolded scalar style.\nI/O errors.\nErrors related to libyml.\nLiteral scalar style.\nRepresents a YAML mapping.\nEnd of a mapping.\nStart of a mapping.\nPlain scalar style.\nRepresents a scalar value in YAML.\nScalar value.\nStyles for YAML scalars.\nRepresents a YAML sequence.\nEnd of a sequence.\nStart of a sequence.\nSingle quoted scalar style.\nEnd of a YAML stream.\nStart of a YAML stream.\nDrops the YAML emitter, deallocating resources.\nEmits a YAML event.\nRetrieves the error from the YAML emitter.\nFlushes the YAML emitter.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRetrieves the inner writer from the YAML emitter.\nCreates a new YAML emitter.\nStyle of the scalar.\nOptional tag for the scalar.\nOptional tag for the sequence.\nOptional tag for the mapping.\nValue of the scalar.\nContains the error value\nRepresents an error that occurred during YAML processing.\nRepresents a mark in a YAML document. A mark indicates a …\nContains the success value\nA type alias for a <code>Result</code> with an <code>Error</code> as the error type.\nRetrieves the column number of the mark.\nAn optional null-terminated string providing additional …\nThe mark indicating the position of the context related to …\nConstructs an <code>Error</code> from a <code>YamlEmitterT</code> pointer.\nFormats the mark for display purposes.\nFormats the mark for debugging purposes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the index of the mark.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe kind of error that occurred.\nRetrieves the line number of the mark.\nReturns the mark indicating the position of the problem …\nConstructs an <code>Error</code> from a <code>YamlParserT</code> pointer.\nA null-terminated string describing the problem that …\nThe mark indicating the position of the problem that …\nThe offset of the problem that caused the error.\nThe underlying system representation of the mark.\nIndicates an alias to an anchor in a YAML document.\nRepresents an anchor in a YAML document.\nIndicates the end of a YAML document.\nIndicates the start of a YAML document.\nIndicates a double-quoted scalar value.\nRepresents a YAML event encountered during parsing.\nIndicates a folded scalar value.\nIndicates a literal scalar value.\nIndicates the end of a mapping in a YAML document.\nRepresents the start of a mapping in a YAML document.\nIndicates the start of a mapping in a YAML document.\nRepresents a YAML parser.\nRepresents a pinned parser for YAML deserialization.\nIndicates a plain scalar value.\nRepresents a scalar value in a YAML document.\nRepresents a scalar value in a YAML document.\nRepresents the style of a scalar value in a YAML document.\nIndicates the end of a sequence in a YAML document.\nRepresents the start of a sequence in a YAML document.\nIndicates the start of a sequence in a YAML document.\nIndicates a single-quoted scalar value.\nIndicates the end of a YAML stream.\nIndicates the start of a YAML stream.\nThe anchor associated with the scalar value.\nThe anchor associated with the sequence.\nThe anchor associated with the mapping.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe input data being parsed.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the parser is initialized and ready to parse …\nCreates a new <code>Parser</code> instance with the given input data.\nParses the next YAML event from the input.\nThe pinned parser state.\nThe representation of the scalar value as a byte slice.\nThe style of the scalar value.\nThe underlying <code>YamlParserT</code> struct from the <code>libyml</code> library.\nThe tag associated with the scalar value.\nThe tag associated with the sequence.\nThe tag associated with the mapping.\nThe value of the scalar as a byte slice.\nStruct representing a C string.\nA custom error type for CStr operations.\nDebugs a C string by printing it in a format that can be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new <code>CStr</code> instance from a static byte slice that …\nCreates a new <code>CStr</code> instance from a <code>NonNull&lt;i8&gt;</code> raw pointer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the C-style string represented by the <code>CStr</code> …\nCalculates the length of the C-style string represented by …\nRetrieves a reference to the underlying byte slice of the …\nThe bool tag, representing a boolean value.\nThe float tag, representing a floating-point value.\nThe int tag, representing an integer value.\nThe null tag, representing a null value.\nRepresents a tag in a YAML document. A tag specifies the …\nCustom error type for Tag operations.\nDereferences the tag to its underlying byte slice.\nChecks if the tag is equal to the given string slice.\nChecks if the tag is equal to the given string.\nFormats the error message for display.\nFormats the tag for debugging purposes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Tag</code> instance from a <code>&amp;str</code> input.\nChecks if the tag starts with the given prefix.\nA transparent wrapper around a mutable pointer of type <code>T</code>.\nA struct representing ownership of a pointer to a value of …\nConverts an uninitialized <code>Owned</code> instance to an initialized …\nReturns a reference to the <code>InitPtr</code> wrapped by <code>Owned</code>.\nDeallocates the memory held by <code>Owned</code> when it goes out of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new uninitialized <code>Owned</code> instance.\nThe mutable pointer.\nRepresents a YAML document.\nRepresents a YAML loader.\nMap from alias id to index in events.\nAny error encountered during parsing.\nThe parsed events of the document.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>Loader</code> instance from the given progress.\nAdvances the loader to the next document and returns it.\nThe count of documents parsed by the loader.\nThe YAML parser used to parse the input.\nError returned when a duplicate key is encountered while …\nEntry for an existing key-value pair or a vacant location …\nA trait for types that can be used to index into a …\nIterator over <code>serde_yml::Mapping</code> by value.\nIterator of the keys of a <code>serde_yml::Mapping</code>.\nIterator of the values of a <code>serde_yml::Mapping</code>.\nIterator over <code>&amp;serde_yml::Mapping</code>.\nIterator over <code>&amp;mut serde_yml::Mapping</code>.\nIterator of the keys of a <code>&amp;serde_yml::Mapping</code>.\nA YAML mapping in which the keys and values are both …\nExisting slot with equivalent key.\nA view into an occupied entry in a <code>Mapping</code>. It is part of …\nVacant slot (no equivalent key in the map).\nA view into a vacant entry in a <code>Mapping</code>. It is part of the …\nIterator of the values of a <code>&amp;serde_yml::Mapping</code>.\nIterator of the values of a <code>&amp;mut serde_yml::Mapping</code>.\nProvides in-place mutable access to an occupied entry …\nReturns the number of elements the mapping can hold …\nClears the mapping, removing all key-value pairs.\nReturns <code>true</code> if the mapping contains a value for the …\nGets the given key’s corresponding entry in the mapping …\nThe key-value pair that caused the conflict.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value corresponding to the key.\nGets a reference to the value in the entry.\nReturns a mutable reference to the value corresponding to …\nGets a mutable reference to the value in the entry.\nInserts a key-value pair into the mapping.\nSets the value of the entry with the <code>OccupiedEntry</code>’s …\nSets the value of the entry with the VacantEntry’s key, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTakes ownership of the key, leaving the entry vacant.\nReturns an owning iterator over the keys of the mapping, …\nConverts the entry into a mutable reference to its value.\nReturns an owning iterator over the values of the mapping, …\nReturns <code>true</code> if the mapping contains no elements.\nReturns an iterator over the key-value pairs of the …\nReturns a mutable iterator over the key-value pairs of the …\nReturns a reference to this entry’s key.\nGets a reference to the key in the entry.\nGets a reference to the key that would be used when …\nReturns an iterator over the keys of the mapping, in their …\nReturns the number of elements in the mapping.\nThe underlying map.\nCreates an empty YAML mapping.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nRemoves a key from the mapping, returning the value at the …\nTakes the value of the entry out of the map, and returns …\nRemoves a key from the mapping, returning the stored key …\nRemove and return the key, value pair stored in the map …\nReserves capacity for at least <code>additional</code> more elements to …\nRetains only the elements specified by the predicate.\nRemoves a key from the mapping, returning the value at the …\nRemoves a key from the mapping, returning the stored key …\nShrinks the capacity of the mapping as much as possible.\nRemoves a key from the mapping, returning the value at the …\nRemoves a key from the mapping, returning the stored key …\nReturns an iterator over the values of the mapping, in …\nReturns a mutable iterator over the values of the mapping, …\nCreates an empty YAML mapping with the given initial …\nThe <code>error</code> module contains the <code>Error</code> struct and its …\nThe <code>path</code> module contains the <code>Path</code> struct and its …\nAn error indicating that byte-based YAML is unsupported.\nAn error indicating that an empty tag was encountered.\nAn error indicating that the end of the YAML stream was …\nContains the error value\nAn error that occurred during YAML serialization or …\nThe internal representation of an error.\nAn error indicating that parsing a number failed.\nAn error encountered while converting a byte slice to a …\nAn I/O error.\nAn error originating from the <code>libyml</code> library.\nThe input location where an error occurred.\nA generic error message with an optional position.\nAn error indicating that more than one YAML document was …\nContains the success value\nRepresents a position in the YAML input.\nAn error indicating that the recursion limit was exceeded.\nAn error indicating that the repetition limit was exceeded.\nAlias for a <code>Result</code> with the error type <code>serde_yml::Error</code>.\nAn error indicating that a scalar value was encountered in …\nAn error indicating that a scalar value was encountered in …\nAn error indicating that a sequence was encountered in a …\nAn error indicating that serializing a nested enum is not …\nA shared error implementation.\nAn error indicating that a tagged value was encountered in …\nAn error indicating that an unknown anchor was encountered.\nReturns the column number where the error occurred.\nFixes the mark and path in an error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the byte index where the error occurred.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the I/O error that caused this error, if available.\nReturns the line number where the error occurred.\nReturns the location where the error occurred, if …\nCreates a new <code>Error</code> from the given <code>ErrorImpl</code>.\nCreates a new <code>Error</code> from a shared <code>ErrorImpl</code>.\nReturns a shared reference to the internal error …\nRepresents an alias path with a reference to the parent …\nRepresents a map (object) path with a reference to the …\n<code>Path</code> represents the path to the current value in the …\nRepresents the root path.\nRepresents a sequence (array) path with a reference to the …\nRepresents an unknown path with a reference to the parent …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe index within the sequence.\nThe key within the map.\nThe parent path.\nThe parent path.\nThe parent path.\nThe parent path.\nRepresents a YAML number, whether integer or floating …\nRepresents the number as f64 if possible. Returns None …\nIf the <code>Number</code> is an integer, represent it as i64 if …\nIf the <code>Number</code> is an integer, represent it as u64 if …\nReturns true if the <code>Number</code> can be represented by f64.\nReturns true if this number is neither infinite nor NaN.\nReturns true if the <code>Number</code> is an integer between <code>i64::MIN</code> …\nReturns true if this value is positive infinity or …\nReturns true if this value is NaN and false otherwise.\nReturns true if the <code>Number</code> is an integer between zero and …\nAlready tagged.\nCheck for a duplicate tag.\nCheck for a tag.\nFound a tag.\nNothing in particular.\nA structure for serializing Rust values into YAML.\nThe configuration of the serializer.\nThe state of the serializer.\nThe configuration of the serializer.\nThe depth of the current serialization.\nEmit a mapping end.\nEmit a mapping start.\nEmit a scalar value.\nEmit a sequence end.\nEmit a sequence start.\nThe YAML emitter.\nCalls <code>.flush()</code> on the underlying <code>io::Write</code> object.\nFlush the mapping start.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnwrap the underlying <code>io::Write</code> object from the <code>Serializer</code>.\nCreates a new YAML serializer.\nCreates a new YAML serializer with a configuration.\nThe current state of the serializer.\nWhen set to <code>true</code>, all unit variants will be serialized as …\nTake the tag if it exists.\nSerialize the given data structure as a String of YAML.\nSerialize the given data structure as YAML into the IO …\nEmit a value end.\nEmit a value start.\nThe underlying writer.\nRepresents a YAML boolean.\nA type that can be used to index into a <code>serde_yml::Value</code>. …\nA YAML mapping in which the keys and values are both …\nRepresents a YAML mapping in which the keys and values are …\nRepresents a YAML null value.\nRepresents a YAML numerical value, whether integer or …\nA YAML sequence in which the elements are <code>serde_yml::Value</code>.\nRepresents a YAML sequence in which the elements are …\nSerializer whose output is a <code>Value</code>.\nRepresents a YAML string.\nA representation of YAML’s <code>!Tag</code> syntax, used for enums.\nRepresents any valid YAML value.\nPerforms merging of <code>&lt;&lt;</code> keys into the surrounding mapping.\nIf the <code>Value</code> is a Boolean, returns the associated bool. …\nIf the <code>Value</code> is a number, represent it as f64 if possible. …\nIf the <code>Value</code> is an integer, represent it as i64 if …\nIf the <code>Value</code> is a mapping, return a reference to it if …\nIf the <code>Value</code> is a mapping, return a reference to it if …\nIf the <code>Value</code> is a Null, returns (). Returns None otherwise.\nIf the <code>Value</code> is a sequence, return a reference to it if …\nIf the <code>Value</code> is a sequence, return a mutable reference to …\nIf the <code>Value</code> is a String, returns the associated str. …\nIf the <code>Value</code> is an integer, represent it as u64 if …\nReturns the argument unchanged.\nInterpret a <code>serde_yml::Value</code> as an instance of type <code>T</code>.\nIndex into a YAML sequence or map. A string index can be …\nIndex into a YAML sequence or map. A string index can be …\nCalls <code>U::from(self)</code>.\nReturns true if the <code>Value</code> is a Boolean. Returns false …\nReturns true if the <code>Value</code> is a number that can be …\nReturns true if the <code>Value</code> is an integer between <code>i64::MIN</code> …\nReturns true if the <code>Value</code> is a mapping. Returns false …\nReturns true if the <code>Value</code> is a Null. Returns false …\nReturns true if the <code>Value</code> is a Number. Returns false …\nReturns true if the <code>Value</code> is a sequence. Returns false …\nReturns true if the <code>Value</code> is a String. Returns false …\nReturns true if the <code>Value</code> is an integer between <code>u64::MIN</code> …\nThe underlying map.\nA representation of YAML’s <code>!Tag</code> syntax, used for enums.\nConverts a serializable value into a <code>serde_yml::Value</code>.\nA tagged value with an optional tag.\nThe value.\nA representation of YAML’s <code>!Tag</code> syntax, used for enums.\nThe tag.\nA <code>Tag</code> + <code>Value</code> representing a tagged YAML scalar, sequence, …\nReturns a <code>MaybeTag</code> enum indicating whether the input value …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new <code>Tag</code>.\nReturns the portion of a YAML tag after the exclamation …\nThe string representation of the tag.\nThe tag of the tagged value.\nThe value of the tagged value.\nSerialize/deserialize nested enums using a YAML map …\nSerialize/deserialize an enum using a YAML map containing …\nSerialize/deserialize an optional enum using a YAML map …\nApply <code>singleton_map</code> to <em>all</em> enums contained within the data …\nSerialize/deserialize an enum using a YAML map containing …\nDeserializes a value using the nested singleton map …\nSerializes a value using the nested singleton map …\nA helper struct for serializing struct variants as …\nA helper struct for serializing tuple variants as …\nA wrapper struct that delegates serialization and …\nThe underlying serializer or deserializer to which …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSerializes a given value using a singleton map …\nDeserializes a value using the <code>singleton_map</code> …\nSerializes an optional value using the <code>singleton_map</code> …\nDeserializes a value using the <code>singleton_map</code> …\nSerializes a value using the <code>singleton_map</code> representation.")